{"ast":null,"code":"var _jsxFileName = \"/home/cuelogic.local/mahesh.auti/Documents/shastradaan/src/components/PlaceSearchBox.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { Link } from \"react-router-dom\";\nimport { useState, useRef, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst google = window.google;\nvar autoComplete;\n\nconst PlaceSearchBox = () => {\n  _s();\n\n  let autoCompleteRef = useRef(null);\n  const [text, setText] = useState(\"\");\n  const [schools, setSchools] = useState([]);\n  const [cardVisibility, setCardVisibility] = useState(\"none\"); //visible\n\n  const [latitude, setLatitude] = useState(7.798000);\n  const [longitude, setLongitude] = useState(68.14712);\n  const [city, setCity] = useState(\"\");\n\n  function fetchSchools() {\n    var pyrmont = new google.maps.LatLng(latitude, longitude);\n    var map = new google.maps.Map(document.getElementById('map'), {\n      center: pyrmont,\n      zoom: 15\n    });\n    var service = new google.maps.places.PlacesService(map);\n    var request = {\n      location: pyrmont,\n      radius: '500',\n      query: text,\n      types: ['school']\n    };\n    service.textSearch(request, (results, status) => {\n      if (status === google.maps.places.PlacesServiceStatus.OK) {\n        setCardVisibility(\"block\");\n        let schoolsArr = [];\n\n        if (results.length > 0) {\n          for (var i = 0; i < results.length; i++) {\n            let place = results[i];\n            let placeAddress = place.formatted_address.toUpperCase();\n\n            if (placeAddress.includes(city.toUpperCase())) {\n              schoolsArr.push(results[i]);\n            }\n          }\n\n          setSchools(schoolsArr);\n        }\n      }\n    });\n  }\n\n  function handleInput(e) {\n    if (e.target.value === \"\") {\n      setSchools([]);\n      setText(e.target.value); //       setCardVisibility(\"none\");\n    } else {\n      setText(e.target.value);\n      fetchSchools();\n    }\n  }\n\n  useEffect(() => {\n    autoComplete = new window.google.maps.places.Autocomplete(autoCompleteRef.current, {\n      types: [\"(cities)\"],\n      componentRestrictions: {\n        country: \"in\"\n      }\n    }); // autoComplete.setFields([\"address_components\", \"formatted_address\", \"name\"]);\n\n    autoComplete.addListener(\"place_changed\", () => {\n      const place = autoComplete.getPlace();\n      setLatitude(place.geometry.location.lat());\n      setLongitude(place.geometry.location.lng());\n      setCity(place.name);\n    });\n    setText(\"\");\n    setCardVisibility(\"none\");\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"map\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"city-input\",\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"search\",\n          ref: autoCompleteRef,\n          placeholder: \"Select a city\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"school-input\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          onChange: handleInput,\n          placeholder: \"Find your school\",\n          type: \"text\",\n          value: text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"schoolCards\",\n          style: {\n            display: cardVisibility\n          },\n          children: schools.map(school => /*#__PURE__*/_jsxDEV(Link, {\n            to: \"/\" + school.place_id,\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              value: \"hello\",\n              className: \"searchCard\",\n              onClick: () => {\n                setCardVisibility(\"none\");\n              },\n              children: [\" \", school.name, \" \", /*#__PURE__*/_jsxDEV(\"div\", {\n                style: {\n                  fontSize: \"0.8rem\",\n                  color: \"gray\"\n                },\n                children: school.formatted_address\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 127,\n                columnNumber: 198\n              }, this)]\n            }, new Date().getTime(), true, {\n              fileName: _jsxFileName,\n              lineNumber: 127,\n              columnNumber: 70\n            }, this), \" \"]\n          }, school.place_id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 109,\n    columnNumber: 5\n  }, this);\n};\n\n_s(PlaceSearchBox, \"z48DNwh89RC/4sGvKH1K/CaVLbs=\");\n\n_c = PlaceSearchBox;\nexport default PlaceSearchBox;\n\nvar _c;\n\n$RefreshReg$(_c, \"PlaceSearchBox\");","map":{"version":3,"sources":["/home/cuelogic.local/mahesh.auti/Documents/shastradaan/src/components/PlaceSearchBox.js"],"names":["React","Link","useState","useRef","useEffect","google","window","autoComplete","PlaceSearchBox","autoCompleteRef","text","setText","schools","setSchools","cardVisibility","setCardVisibility","latitude","setLatitude","longitude","setLongitude","city","setCity","fetchSchools","pyrmont","maps","LatLng","map","Map","document","getElementById","center","zoom","service","places","PlacesService","request","location","radius","query","types","textSearch","results","status","PlacesServiceStatus","OK","schoolsArr","length","i","place","placeAddress","formatted_address","toUpperCase","includes","push","handleInput","e","target","value","Autocomplete","current","componentRestrictions","country","addListener","getPlace","geometry","lat","lng","name","display","school","place_id","fontSize","color","Date","getTime"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Link } from \"react-router-dom\"\nimport { useState, useRef, useEffect } from 'react';\n\nconst google = window.google\n\nvar autoComplete;\n\nconst PlaceSearchBox = () => {\n\n  let autoCompleteRef = useRef(null);\n\n  \n  const [text, setText] = useState(\"\");\n  const [schools, setSchools] = useState([])\n  const [cardVisibility, setCardVisibility] = useState(\"none\") //visible\n  const [latitude, setLatitude] = useState(7.798000);\n  const [longitude, setLongitude] = useState(68.14712);\n\n  const [city, setCity] = useState(\"\");\n\n\n  function fetchSchools() {\n\n    var pyrmont = new google.maps.LatLng(latitude, longitude);\n\n    var map = new google.maps.Map(document.getElementById('map'), {\n      center: pyrmont,\n      zoom: 15\n    });\n\n    var service = new google.maps.places.PlacesService(map);\n\n    var request = {\n      location: pyrmont,\n      radius: '500',\n      query: text,\n      types: ['school']\n    };\n\n    service.textSearch(request, (results, status) => {\n      if (status === google.maps.places.PlacesServiceStatus.OK) {\n        \n        setCardVisibility(\"block\")\n\n        let schoolsArr = []\n\n        \n        if(results.length> 0){\n          \n          for (var i = 0; i < results.length; i++) {\n\n            let place = results[i];\n\n            let placeAddress = place.formatted_address.toUpperCase();\n\n            if (placeAddress.includes(city.toUpperCase()) ) {\n                schoolsArr.push(results[i])\n            }\n        }\n        setSchools(schoolsArr)\n        }\n      }\n    });\n  }\n\n\n  function handleInput(e) {\n\n    if(e.target.value === \"\"){\n      setSchools([])\n      setText(e.target.value);\n//       setCardVisibility(\"none\");\n    }\n    else {\n      setText(e.target.value);\n      fetchSchools();\n    }\n\n  }\n\n\n  useEffect(() => {\n\n    autoComplete = new window.google.maps.places.Autocomplete(\n    \n      autoCompleteRef.current,\n        { types: [\"(cities)\"], componentRestrictions: { country: \"in\" } }\n      );\n    \n      // autoComplete.setFields([\"address_components\", \"formatted_address\", \"name\"]);\n    \n      autoComplete.addListener(\"place_changed\", () => {\n        const place = autoComplete.getPlace();\n        setLatitude(place.geometry.location.lat())\n        setLongitude(place.geometry.location.lng())\n        setCity(place.name)\n      }\n        \n      );\n\n      setText(\"\");\n      setCardVisibility(\"none\");\n  }, [])\n\n  \n\n  return (\n    <div>\n      <div id=\"map\"></div>\n\n      <div className=\"input-container\">\n\n        <div className=\"city-input\">\n          <input type=\"search\" ref={autoCompleteRef} placeholder=\"Select a city\" />\n        </div>\n\n\n        <div className=\"school-input\" >\n          <input onChange={handleInput} placeholder=\"Find your school\" type=\"text\" value={text} />\n\n\n          <div className=\"schoolCards\" style={{ display: cardVisibility }}>\n            {\n\n              schools.map((school) =>\n                <Link key={school.place_id} to={\"/\"+school.place_id}><div value=\"hello\" key={new Date().getTime()} className=\"searchCard\" onClick={() => {setCardVisibility(\"none\")}}> {school.name} <div style={{fontSize:\"0.8rem\", color: \"gray\" }}>\n                {school.formatted_address}\n                </div></div> </Link>)\n            }\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default PlaceSearchBox;\n"]},"metadata":{},"sourceType":"module"}